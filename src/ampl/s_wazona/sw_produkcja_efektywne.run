################################################################################
## Ogolne poszukiwanie rozwiazan efektywnych
################################################################################
## Poszukiwanie polega na wyznaczaniu rozwiazania obiektywnego dla wybranych
## wartosci lambda (wspol. awersji do ryzyka). ZaczynajÄ…c od malej wartosci
## lambda w kazdej iteracji wartosc parametru jest zwiekszana z krokiem 0.1
## (duzy krok).
## Zapisujemy kolejne rozniace sie rozwiazania.
## Przeszukiwanie trwa az do uzyskania punktu rownowaznego minimalziacji samego
## ryzyka
## (PORUSZAMY SIE PO ROZWIAZANIACH PRZY WZROSCIE KOSZTU I SPADKU RYZYKA)
################################################################################
## PARAMETRY:
## --Zewnetrzne (ustawiane przed uruchomieniem skryptu)
##      _PATH: sciezka do folderu ze skryptem
## --Lokalne (zmieniane w skrypcie)
##      _LAMBDAS: zbior wartosci lambda dla ktorych szukamy rozw. optym.
##      _lambda_set_size: rozmiar zbior wartosci lambda.
##      _final_cost: najwieksza wartosc kosztu - dla jakiego mamy przerwac
##                      poszukiwania
##      _final_risk: najmniejsza wartosc ryzyka  - dla jakiego mamy przerwac
##                      poszukiwania
##      _epsilon: dokladnosc do porownywania liczb zmienno przecinkowych
##      _i: do liczenia pentli
##      _last_cost: koszt w ostatnim rozwiazaniu optymalnym
##      _last_risk_: ryzyko w ostatnim rozwiazaniu optymalnym


include sw_produkcja_prerun.run

# wybor pliku wynikowego
let _OUT_FILE := (_PATH & "wyniki/sw_efektywne.txt");

# krok zmiany lambdy
param _lambda_step default 0.1;

# wartosc jaka osiaga solver przy minimalozacji
# samego ryzyka
param _final_risk;
let _final_risk := 388.5;

param _final_cost;
let _final_cost := 15240;

param _last_cost;
let _last_cost := 0;

param _last_risk;
let _last_risk := 0;


param _i;

param _lambda_set_size;

param _epsilon;


param _print_final;
let _print_final := 1;

# zbior rozpatrywanych wartosci lambda
set _LAMBDAS;

# ustawienie najwiekszego mozliwego lambda
let MAX_lambda := 30;

# wyznaczenie zbioru lambdas
let _LAMBDAS :=
    MIN_lambda + _lambda_step .. MAX_lambda by _lambda_step;

let _lambda_set_size := card(_LAMBDAS);

printf "%-8s%-12s%s\n", "lambda", "koszt", "ryzyko" > (_OUT_FILE);

include sw_szukaj_efektywnych.run;
