################################################################################
## Dokladne poszukiwanie rozwiazan efektywnych
################################################################################
## Poszukiwanie polega na wyznaczaniu rozwiazania obiektywnego dla konkretnych
## przedzialow wartosci lambda (wspol. awersji do ryzyka) z krokiem 0.001
## (maly krok).
## Przedzialy wyznaczane sa na podstawie wynikow otrzymanych w ogolnym
## poszukiwaniu rozwiazan efektwnych. Obszar poszukiwan to przedzial w ktorym
## doszlo do wyznaczenia nowego rozwiazania optymalnego
## Zapisujemy kolejne rozniace sie rozwiazania.
## Przeszukiwanie trwa az do sprawdzenia wszystkich przedzialow dla lambda.
## (PORUSZAMY SIE PO ROZWIAZANIACH PRZY WZROSCIE KOSZTU I SPADKU RYZYKA)
################################################################################
## PARAMETRY:
## --Zewnetrzne (ustawiane przed uruchomieniem skryptu)
##      _PATH: sciezka do folderu ze skryptem
##      _M: liczba rozwiazani efektywnych znalezionych ogolnym przeszukiwaniem
##      _efektwyne: rozwiazania efektywne znalezione ogolnym przeszukiwaniem
## --Lokalne (zmieniane w skrypcie)
##      _lambda_smaller_step: maly krok lambda do dokladnych poszukiwan
##      _LAMBDAS: zbior wartosci lambda dla ktorych szukamy rozw. optym.
##      _lambda_set_size: rozmiar zbior wartosci lambda.
##      _final_cost: najwieksza wartosc kosztu - dla jakiego mamy przerwac
##                      poszukiwania
##      _final_risk: najmniejsza wartosc ryzyka  - dla jakiego mamy przerwac
##                      poszukiwania
##      _epsilon: dokladnosc do porownywania liczb zmienno przecinkowych
##      _i: do liczenia pentli
##      _last_cost: koszt w ostatnim rozwiazaniu optymalnym
##      _last_risk_: ryzyko w ostatnim rozwiazaniu optymalnym

include sw_produkcja_prerun.run

# wybor pliku wynikowego
let _OUT_FILE := (_PATH & "wyniki/sw_efektywne_szczeg.txt");

# ustawiam maly krok
param _lambda_smaller_step default 0.001;

# dane o dotychczasowo znalezionych rozw. efektwnych
param _M;
param _lambda_step;
set _kolumny;
param _efektywne{1.._M, _k in _kolumny};

data sw_efektywne.dat;

# dolne konce przedzialu poszukiwan
param _last_cost;
param _last_risk;
# gorne konce przedzialu poszukiwan
param _final_risk;
param _final_cost;

param _i;

param _epsilon;

# czy wypisac rozwiazanie jezeli pokryje sie z koncem przedzialu?
param _print_final;
let _print_final := 0;

param _lambda_set_size;

# zbior rozpatrywanych wartosci lambda
set _LAMBDAS;

# ustawienie najwiekszego mozliwego lambda
let MAX_lambda := 30;

printf "%-8s%-12s%s\n", "lambda", "koszt", "ryzyko" > (_OUT_FILE);
# Mamy _M rozwiazan, a wiec _M-1 przedzialow
for {_p in 1.._M-1} {
    # Przedzial lambda to [L-s, L), gdzie L to lambda dla jakiego znaleziono
    # nowe rozwiazanie, a s to krok z jakim wyszukiwano rozwiazania (duzy)
    let _LAMBDAS :=
        _efektywne[_p+1, '_lambda'] - _lambda_step .. _efektywne[_p+1, '_lambda'] by _lambda_smaller_step;
    let _lambda_set_size := card(_LAMBDAS);

    # Nie interesuja nas juz znalezione rozwiazania (krance przedzialu)
    let _last_cost := _efektywne[_p, '_koszt'];
    let _last_risk := _efektywne[_p, '_ryzyko'];

    let _final_cost := _efektywne[_p+1, '_koszt'];
    let _final_risk := _efektywne[_p+1, '_ryzyko'];

    include sw_szukaj_efektywnych.run;
}



