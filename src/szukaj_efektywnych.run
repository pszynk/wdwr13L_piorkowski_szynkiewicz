###############################################################################
## Skrypt do wyszukiwanie rozwiazan optymalnych dla pewnych wartosci lambda
##############################################################################
## PARAMETRY:
## --Zewnetrzne (ustawiane przed uruchomieniem skryptu)
##      _OUT_FILE: plik do wypisywania znalezionych punktow
##      _LAMBDAS: zbior wartosci lambda dla ktorych szukamy rozw. optym.
##      _lambda_set_size: rozmiar zbior wartosci lambda.
##      _final_cost: najwieksza wartosc kosztu dla jakiego mamy przerwac
##                      poszukiwania
##      _final_risk: najmniejsza wartosc ryzyka dla jakiego mamy przerwac
##                      poszukiwania
## --Lokalne (zmieniane w skrypcie)
##      _epsilon: dokladnosc do porownywania liczb zmienno przecinkowych
##      _i: do liczenia pentli
##      _last_cost: koszt w ostatnim rozwiazaniu optymalnym
##      _last_risk_: ryzyko w ostatnim rozwiazaniu optymalnym

option solver_msg 0;
let _epsilon := 0.00001;
let _i := 0;

# dla kazdej lambdy ze zbioru rozpatrywanych wartosci
for {_ll in _LAMBDAS} {
    let _i := _i + 1;
    printf "%d/%6d\n", _i, _lambda_set_size;

    # ustaw wartosc lambda w modelu
    let lambda := _ll;

    # uruchom solver;
    solve;

    # jezeli koszt i ryzyko nie roznia sie od ostatnio znalezionch
    # to nowa iteracja
    if  ( abs(mean - _last_cost) < _epsilon) and
        (abs(aa_deviation - _last_risk) < _epsilon) then continue;

    # zapamietaj nowy punkt optymalny
    let _last_cost := mean;
    let _last_risk := aa_deviation;

    # sprawdz czy znaleziony punkt nie przekracza rozwiazania granicznego
    if (aa_deviation <= _final_risk) or (mean >= _final_cost) then {
            #printf "\n        %-18f%f <- finals\n", _final_cost, _final_risk >> (OUT_FILE);
        # czy wypisac rozwiazanie graniczne
        if _print_final then {
            printf "%-8.4f%-12.4f%.4f\n", lambda, mean, aa_deviation >> (OUT_FILE);
        }
        # przerwac petle, doszlismy do ostatniego rozwiazania
        break;
    # wypisac nowy punkt optymalny
    } else {
        printf "%-8.4f%-12.4f%.4f\n", lambda, mean, aa_deviation >> (OUT_FILE);
    }
}
